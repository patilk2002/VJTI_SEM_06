{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "-8WIMHDuYaIk",
        "outputId": "72f0cedb-986b-4fa8-e8e8-e5af47247479"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rank             youtube_channel  subscribers      video_views video_count  \\\n",
              "0     1                    T-Series  234,000,000  212,900,271,553      18,515   \n",
              "1     2              YouTube Movies  161,000,000                0           0   \n",
              "2     3  Cocomelon - Nursery Rhymes  152,000,000  149,084,178,448         846   \n",
              "3     4                   SET India  150,000,000  137,828,094,104     103,200   \n",
              "4     5                     MrBeast  128,000,000   21,549,128,785         733   \n",
              "\n",
              "           category  started  \n",
              "0             Music     2006  \n",
              "1  Film & Animation     2015  \n",
              "2         Education     2006  \n",
              "3             Shows     2006  \n",
              "4     Entertainment     2012  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-848dce66-4fcb-4c0f-8bbe-3833bbdf58ae\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>youtube_channel</th>\n",
              "      <th>subscribers</th>\n",
              "      <th>video_views</th>\n",
              "      <th>video_count</th>\n",
              "      <th>category</th>\n",
              "      <th>started</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>T-Series</td>\n",
              "      <td>234,000,000</td>\n",
              "      <td>212,900,271,553</td>\n",
              "      <td>18,515</td>\n",
              "      <td>Music</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>YouTube Movies</td>\n",
              "      <td>161,000,000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Film &amp; Animation</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Cocomelon - Nursery Rhymes</td>\n",
              "      <td>152,000,000</td>\n",
              "      <td>149,084,178,448</td>\n",
              "      <td>846</td>\n",
              "      <td>Education</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>SET India</td>\n",
              "      <td>150,000,000</td>\n",
              "      <td>137,828,094,104</td>\n",
              "      <td>103,200</td>\n",
              "      <td>Shows</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>MrBeast</td>\n",
              "      <td>128,000,000</td>\n",
              "      <td>21,549,128,785</td>\n",
              "      <td>733</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>2012</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-848dce66-4fcb-4c0f-8bbe-3833bbdf58ae')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-848dce66-4fcb-4c0f-8bbe-3833bbdf58ae button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-848dce66-4fcb-4c0f-8bbe-3833bbdf58ae');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data_frame = pd.read_csv(\"sample_data/topSubscribed.csv\" , names = ['rank' , 'youtube_channel', 'subscribers', 'video_views' , 'video_count' , 'category' , 'started'])\n",
        "data_frame.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.describe()"
      ],
      "metadata": {
        "id": "-YXwX4j6cY-H",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "29c15a15-d776-4d90-a87b-854cfbac5ebf"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              rank      started\n",
              "count  1000.000000  1000.000000\n",
              "mean    500.500000  2012.594000\n",
              "std     288.819436     4.110238\n",
              "min       1.000000  1970.000000\n",
              "25%     250.750000  2010.000000\n",
              "50%     500.500000  2013.000000\n",
              "75%     750.250000  2015.000000\n",
              "max    1000.000000  2021.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-017489a6-44b4-4751-99e2-bede396b3449\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>started</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>500.500000</td>\n",
              "      <td>2012.594000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>288.819436</td>\n",
              "      <td>4.110238</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1970.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>250.750000</td>\n",
              "      <td>2010.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>500.500000</td>\n",
              "      <td>2013.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>750.250000</td>\n",
              "      <td>2015.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1000.000000</td>\n",
              "      <td>2021.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-017489a6-44b4-4751-99e2-bede396b3449')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-017489a6-44b4-4751-99e2-bede396b3449 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-017489a6-44b4-4751-99e2-bede396b3449');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.shape"
      ],
      "metadata": {
        "id": "HuW3bep6welG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "6d52d632-5356-4e77-fc7c-a9b94294f011"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.category"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "C2hkz8zEhrZ8",
        "outputId": "9f08dd5c-3012-45a2-8efb-a0f614f14802"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0                 Music\n",
              "1      Film & Animation\n",
              "2             Education\n",
              "3                 Shows\n",
              "4         Entertainment\n",
              "             ...       \n",
              "995      People & Blogs\n",
              "996               Music\n",
              "997           Education\n",
              "998      People & Blogs\n",
              "999      People & Blogs\n",
              "Name: category, Length: 1000, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame['category'][356]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "hXr43P6Jg6x9",
        "outputId": "e5fa097f-4afa-497c-d82f-82e6b794f88b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Comedy'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.loc[data_frame.category == 'Music'] "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 650
        },
        "id": "bAfvChAsicP9",
        "outputId": "1959c14a-da0b-4e0d-9c40-73d0bcfc5c5e"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rank                       youtube channel  subscribers      video views  \\\n",
              "0       1                              T-Series  234,000,000  212,900,271,553   \n",
              "12     13                     Zee Music Company   91,600,000   53,352,597,784   \n",
              "18     19                             BANGTANTV   73,100,000   19,240,057,894   \n",
              "19     20                         Justin Bieber   70,800,000   29,598,652,357   \n",
              "20     21                           HYBE LABELS   69,600,000   25,947,702,825   \n",
              "..    ...                                   ...          ...              ...   \n",
              "962   963                     elcarteldesantatv   11,700,000    6,698,448,077   \n",
              "972   973                            Mundo Bita   11,600,000   15,080,936,964   \n",
              "978   979                    Biper y sus Amigos   11,600,000    5,200,224,730   \n",
              "989   990  Star Casablanca | نجوم الدار البيضاء   11,500,000    5,338,043,398   \n",
              "996   997                   Nirahua Music World   11,500,000    5,997,717,755   \n",
              "\n",
              "    video count category  started  \n",
              "0        18,515    Music     2006  \n",
              "12        7,530    Music     2014  \n",
              "18        2,090    Music     2012  \n",
              "19          249    Music     2007  \n",
              "20        1,070    Music     2008  \n",
              "..          ...      ...      ...  \n",
              "962         344    Music     2008  \n",
              "972         195    Music     2011  \n",
              "978         148    Music     2012  \n",
              "989       1,030    Music     2015  \n",
              "996         788    Music     2014  \n",
              "\n",
              "[217 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-78e3a57f-e624-40b2-adbd-fa78a6f167b7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>youtube channel</th>\n",
              "      <th>subscribers</th>\n",
              "      <th>video views</th>\n",
              "      <th>video count</th>\n",
              "      <th>category</th>\n",
              "      <th>started</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>T-Series</td>\n",
              "      <td>234,000,000</td>\n",
              "      <td>212,900,271,553</td>\n",
              "      <td>18,515</td>\n",
              "      <td>Music</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>Zee Music Company</td>\n",
              "      <td>91,600,000</td>\n",
              "      <td>53,352,597,784</td>\n",
              "      <td>7,530</td>\n",
              "      <td>Music</td>\n",
              "      <td>2014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>BANGTANTV</td>\n",
              "      <td>73,100,000</td>\n",
              "      <td>19,240,057,894</td>\n",
              "      <td>2,090</td>\n",
              "      <td>Music</td>\n",
              "      <td>2012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>Justin Bieber</td>\n",
              "      <td>70,800,000</td>\n",
              "      <td>29,598,652,357</td>\n",
              "      <td>249</td>\n",
              "      <td>Music</td>\n",
              "      <td>2007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>21</td>\n",
              "      <td>HYBE LABELS</td>\n",
              "      <td>69,600,000</td>\n",
              "      <td>25,947,702,825</td>\n",
              "      <td>1,070</td>\n",
              "      <td>Music</td>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>962</th>\n",
              "      <td>963</td>\n",
              "      <td>elcarteldesantatv</td>\n",
              "      <td>11,700,000</td>\n",
              "      <td>6,698,448,077</td>\n",
              "      <td>344</td>\n",
              "      <td>Music</td>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>972</th>\n",
              "      <td>973</td>\n",
              "      <td>Mundo Bita</td>\n",
              "      <td>11,600,000</td>\n",
              "      <td>15,080,936,964</td>\n",
              "      <td>195</td>\n",
              "      <td>Music</td>\n",
              "      <td>2011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>978</th>\n",
              "      <td>979</td>\n",
              "      <td>Biper y sus Amigos</td>\n",
              "      <td>11,600,000</td>\n",
              "      <td>5,200,224,730</td>\n",
              "      <td>148</td>\n",
              "      <td>Music</td>\n",
              "      <td>2012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>989</th>\n",
              "      <td>990</td>\n",
              "      <td>Star Casablanca | نجوم الدار البيضاء</td>\n",
              "      <td>11,500,000</td>\n",
              "      <td>5,338,043,398</td>\n",
              "      <td>1,030</td>\n",
              "      <td>Music</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>997</td>\n",
              "      <td>Nirahua Music World</td>\n",
              "      <td>11,500,000</td>\n",
              "      <td>5,997,717,755</td>\n",
              "      <td>788</td>\n",
              "      <td>Music</td>\n",
              "      <td>2014</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>217 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78e3a57f-e624-40b2-adbd-fa78a6f167b7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-78e3a57f-e624-40b2-adbd-fa78a6f167b7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-78e3a57f-e624-40b2-adbd-fa78a6f167b7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.loc[(data_frame.category == 'Music') & (data_frame.started == 2010)] \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "mPjpZw8bjr1r",
        "outputId": "6141d61a-36a1-4233-a56b-6671492fcee2"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rank        youtube channel subscribers     video views video count  \\\n",
              "24     25   Shemaroo Filmi Gaane  63,500,000  29,992,048,346       8,464   \n",
              "80     81          One Direction  37,800,000  13,125,170,526         157   \n",
              "130   131        DisneyMusicVEVO  31,400,000  26,620,144,607       1,922   \n",
              "221   222               Coldplay  24,400,000  16,151,404,605         364   \n",
              "265   266    GMM GRAMMY OFFICIAL  22,600,000  24,839,063,221      14,488   \n",
              "279   280       OneDirectionVEVO  21,900,000  11,830,132,973         266   \n",
              "333   334               Skrillex  20,000,000   6,438,877,934         191   \n",
              "351   352  Gusttavo Lima Oficial  19,700,000  12,914,685,124         349   \n",
              "434   435       ArianaGrandeVevo  17,800,000  19,536,373,590         177   \n",
              "436   437            officialpsy  17,800,000  10,278,257,112         123   \n",
              "555   556                 Camilo  15,600,000   6,432,024,424         118   \n",
              "567   568               MK MUSIC  15,300,000   8,419,062,111       4,854   \n",
              "622   623             MattyBRaps  14,700,000   3,433,181,614         188   \n",
              "692   693        Katakit Baby TV  14,100,000   5,811,945,530         196   \n",
              "756   757            jbalvinVEVO  13,300,000  20,219,708,239         235   \n",
              "827   828        Lokdhun Punjabi  12,800,000   4,552,563,710       1,400   \n",
              "840   841       NickiMinajAtVEVO  12,600,000   8,617,068,421          98   \n",
              "\n",
              "    category  started  \n",
              "24     Music     2010  \n",
              "80     Music     2010  \n",
              "130    Music     2010  \n",
              "221    Music     2010  \n",
              "265    Music     2010  \n",
              "279    Music     2010  \n",
              "333    Music     2010  \n",
              "351    Music     2010  \n",
              "434    Music     2010  \n",
              "436    Music     2010  \n",
              "555    Music     2010  \n",
              "567    Music     2010  \n",
              "622    Music     2010  \n",
              "692    Music     2010  \n",
              "756    Music     2010  \n",
              "827    Music     2010  \n",
              "840    Music     2010  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-19c1b7c6-64b0-4c8a-96cb-6922438780e6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>youtube channel</th>\n",
              "      <th>subscribers</th>\n",
              "      <th>video views</th>\n",
              "      <th>video count</th>\n",
              "      <th>category</th>\n",
              "      <th>started</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>25</td>\n",
              "      <td>Shemaroo Filmi Gaane</td>\n",
              "      <td>63,500,000</td>\n",
              "      <td>29,992,048,346</td>\n",
              "      <td>8,464</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>81</td>\n",
              "      <td>One Direction</td>\n",
              "      <td>37,800,000</td>\n",
              "      <td>13,125,170,526</td>\n",
              "      <td>157</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>130</th>\n",
              "      <td>131</td>\n",
              "      <td>DisneyMusicVEVO</td>\n",
              "      <td>31,400,000</td>\n",
              "      <td>26,620,144,607</td>\n",
              "      <td>1,922</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>221</th>\n",
              "      <td>222</td>\n",
              "      <td>Coldplay</td>\n",
              "      <td>24,400,000</td>\n",
              "      <td>16,151,404,605</td>\n",
              "      <td>364</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>265</th>\n",
              "      <td>266</td>\n",
              "      <td>GMM GRAMMY OFFICIAL</td>\n",
              "      <td>22,600,000</td>\n",
              "      <td>24,839,063,221</td>\n",
              "      <td>14,488</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>279</th>\n",
              "      <td>280</td>\n",
              "      <td>OneDirectionVEVO</td>\n",
              "      <td>21,900,000</td>\n",
              "      <td>11,830,132,973</td>\n",
              "      <td>266</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333</th>\n",
              "      <td>334</td>\n",
              "      <td>Skrillex</td>\n",
              "      <td>20,000,000</td>\n",
              "      <td>6,438,877,934</td>\n",
              "      <td>191</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>351</th>\n",
              "      <td>352</td>\n",
              "      <td>Gusttavo Lima Oficial</td>\n",
              "      <td>19,700,000</td>\n",
              "      <td>12,914,685,124</td>\n",
              "      <td>349</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>434</th>\n",
              "      <td>435</td>\n",
              "      <td>ArianaGrandeVevo</td>\n",
              "      <td>17,800,000</td>\n",
              "      <td>19,536,373,590</td>\n",
              "      <td>177</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>436</th>\n",
              "      <td>437</td>\n",
              "      <td>officialpsy</td>\n",
              "      <td>17,800,000</td>\n",
              "      <td>10,278,257,112</td>\n",
              "      <td>123</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>555</th>\n",
              "      <td>556</td>\n",
              "      <td>Camilo</td>\n",
              "      <td>15,600,000</td>\n",
              "      <td>6,432,024,424</td>\n",
              "      <td>118</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>567</th>\n",
              "      <td>568</td>\n",
              "      <td>MK MUSIC</td>\n",
              "      <td>15,300,000</td>\n",
              "      <td>8,419,062,111</td>\n",
              "      <td>4,854</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>622</th>\n",
              "      <td>623</td>\n",
              "      <td>MattyBRaps</td>\n",
              "      <td>14,700,000</td>\n",
              "      <td>3,433,181,614</td>\n",
              "      <td>188</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>692</th>\n",
              "      <td>693</td>\n",
              "      <td>Katakit Baby TV</td>\n",
              "      <td>14,100,000</td>\n",
              "      <td>5,811,945,530</td>\n",
              "      <td>196</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>756</th>\n",
              "      <td>757</td>\n",
              "      <td>jbalvinVEVO</td>\n",
              "      <td>13,300,000</td>\n",
              "      <td>20,219,708,239</td>\n",
              "      <td>235</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>827</th>\n",
              "      <td>828</td>\n",
              "      <td>Lokdhun Punjabi</td>\n",
              "      <td>12,800,000</td>\n",
              "      <td>4,552,563,710</td>\n",
              "      <td>1,400</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>840</th>\n",
              "      <td>841</td>\n",
              "      <td>NickiMinajAtVEVO</td>\n",
              "      <td>12,600,000</td>\n",
              "      <td>8,617,068,421</td>\n",
              "      <td>98</td>\n",
              "      <td>Music</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19c1b7c6-64b0-4c8a-96cb-6922438780e6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-19c1b7c6-64b0-4c8a-96cb-6922438780e6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-19c1b7c6-64b0-4c8a-96cb-6922438780e6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.subscribers.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "j70ZSZEslBOG",
        "outputId": "59e4b97f-dc51-4219-f268-6598b0f3d081"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count           1000\n",
              "unique           282\n",
              "top       12,800,000\n",
              "freq              23\n",
              "Name: subscribers, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.subscribers.max()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "dTya0RGmlXIg",
        "outputId": "b5460ed4-bc6b-4778-e4fc-e3e3c5ffb808"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'93,300,000'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.youtube_channel.unique()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "d2khMpvClpFQ",
        "outputId": "51db33d8-d122-4fe2-d22e-8a0c5ca4ea8a"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['T-Series', 'YouTube Movies', 'Cocomelon - Nursery Rhymes',\n",
              "       'SET India', 'MrBeast', 'Music', 'PewDiePie', '✿ Kids Diana Show',\n",
              "       'Like Nastya', 'Gaming', 'WWE', 'Vlad and Niki',\n",
              "       'Zee Music Company', 'BLACKPINK', 'Goldmines', '5-Minute Crafts',\n",
              "       'Sony SAB', 'Sports', 'BANGTANTV', 'Justin Bieber', 'HYBE LABELS',\n",
              "       'Canal KondZilla', 'Zee TV',\n",
              "       \"Pinkfong Baby Shark - Kids' Songs & Stories\",\n",
              "       'Shemaroo Filmi Gaane', 'ChuChu TV Nursery Rhymes & Kids Songs',\n",
              "       'Colors TV', 'Dude Perfect', 'Movieclips', 'T-Series Bhakti Sagar',\n",
              "       'Tips Official', 'Marshmello', 'Wave Music', 'Sony Music India',\n",
              "       'Aaj Tak', 'EminemMusic', 'El Reino Infantil', 'Ed Sheeran',\n",
              "       \"LooLoo Kids - Nursery Rhymes and Children's Songs\",\n",
              "       'Ariana Grande', 'YRF', 'Taylor Swift',\n",
              "       'BillionSurpriseToys - English Kids Songs & Cartoon',\n",
              "       'Infobells - Hindi', 'Billie Eilish', 'JuegaGerman', 'Badabun',\n",
              "       'Fernanfloo', 'Bad Bunny', 'Felipe Neto', 'SonyMusicIndiaVEVO',\n",
              "       'BRIGHT SIDE', 'Get Movies', 'Você Sabia?', 'whinderssonnunes',\n",
              "       'Shemaroo', 'A4', 'Katy Perry', 'HolaSoyGerman.', 'Alan Walker',\n",
              "       'Voot Kids', 'Like Nastya Show', 'ABS-CBN Entertainment',\n",
              "       'Speed Records', 'Rihanna', 'Маша и Медведь',\n",
              "       'Little Baby Bum - Nursery Rhymes & Kids Songs', 'elrubiusOMG',\n",
              "       'Shakira', 'Luisito Comunica', 'Ishtar Music', 'Kimberly Loaiza',\n",
              "       'LUCCAS NETO - LUCCAS TOON', 'ARY Digital HD',\n",
              "       'Masha and The Bear', 'XXXTENTACION', 'GR6 EXPLODE',\n",
              "       'Toys and Colors', 'TheEllenShow', 'WorkpointOfficial',\n",
              "       'One Direction', 'CarryMinati', 'Daddy Yankee', 'shfa2 - شفا',\n",
              "       'Super Simple Songs - Kids Songs', 'TEDx Talks', 'shfa',\n",
              "       'Jkk Entertainment', 'HAR PAL GEO', 'Mikecrack', 'Maroon 5',\n",
              "       'News', 'Goldmines Gaane Sune Ansune', 'Bruno Mars', 'ช่อง one31',\n",
              "       'Like Nastya ESP', 'Ozuna', 'Maria Clara & JP', 'Sony PAL',\n",
              "       'YouTube', 'Ultra Bollywood', 'ABP NEWS', 'Total Gaming',\n",
              "       'Markiplier', \"Ryan's World\", 'J Balvin', 'Vlad và Niki',\n",
              "       'Geet MP3', 'Desi Music Factory', 'IndiaTV',\n",
              "       'T-Series Apna Punjab', 'La Granja de Zenón', 'VEGETTA777',\n",
              "       'SSSniperWolf', 'NoCopyrightSounds', 'KHANDESHI MOVIES',\n",
              "       'Bollywood Classics', 'PowerKids TV', 'Ch3Thailand',\n",
              "       'Galinha Pintadinha', 'Selena Gomez', 'Eros Now Music',\n",
              "       'Saregama Music', 'Rajshri', 'GENIAL',\n",
              "       'CVS 3D Rhymes & Kids Songs', 'JustinBieberVEVO', 'Mr Bean',\n",
              "       'rezendeevil', 'SMTOWN', 'DisneyMusicVEVO',\n",
              "       'BabyBus - Kids Songs and Cartoons', 'Dream', 'Techno Gamerz',\n",
              "       'Luis Fonsi', \"Genevieve's Playhouse - Learning Videos for Kids\",\n",
              "       'Ricis Official', 'MrBeast Gaming', 'The Weeknd', 'Jingle Toons',\n",
              "       'The Tonight Show Starring Jimmy Fallon', 'Trap Nation',\n",
              "       'Worldwide Records Bhojpuri', 'AH', 'Peppa Pig - Official Channel',\n",
              "       'Boram Tube Vlog [보람튜브 브이로그]', 'Wow Kidz', \"Spinnin' Records\",\n",
              "       'ImagineDragons', 'MR. INDIAN HACKER', 'Shawn Mendes', 'DONA 도나',\n",
              "       'GMANetwork', 'Adele', 'Popular on YouTube',\n",
              "       'قناة طيور الجنة | toyoraljanahtv', 'AuronPlay',\n",
              "       'Little Angel: Nursery Rhymes & Kids Songs', 'Talking Tom',\n",
              "       'Ultra Records', 'Maluma', 'Round2hell', 'ashish chanchlani vines',\n",
              "       'jacksepticeye', 'KAROL G', 'Zee News', 'व्लाद और निकिता',\n",
              "       'Lucas and Marcus', 'TheDonato',\n",
              "       'The Late Late Show with James Corden', 'AboFlah',\n",
              "       'infobells - Tamil', 'Drake', 'Aditya Music',\n",
              "       'Bounce Patrol - Kids Songs', 'Michael Jackson', 'Wiz Khalifa',\n",
              "       'Sandeep Maheshwari', 'infobells - Telugu', 'A.O.D', 'enchufetv',\n",
              "       'toycantando', 'Aditya Movies', 'JYP Entertainment', 'DanTDM',\n",
              "       'Nick Jr.', 'Goldmines Dishoom', 'WORLDSTARHIPHOP',\n",
              "       'Renato Garcia YT', 'Jess No Limit', 'Masha y el Oso',\n",
              "       'BB Ki Vines', 'VanossGaming', '1MILLION Dance Studio', 'Netflix',\n",
              "       'Shemaroo Movies', 'TaylorSwiftVEVO', 'LosPolinesios', 'Crazy XYZ',\n",
              "       'Raffy Tulfo in Action', 'Beyoncé', 'Marília Mendonça',\n",
              "       'Enaldinho', 'RihannaVEVO', 'StarPlus', 'Nicki Minaj',\n",
              "       'Las Ratitas', 'Smosh', 'David Guetta', 'HUM TV', 'WatchMojo.com',\n",
              "       'ZHC', 'Yuya', 'EminemVEVO', 'Post Malone', 'KatyPerryVEVO',\n",
              "       'Rans Entertainment', 'Chris Brown', 'Brent Rivera',\n",
              "       'Super JoJo - Nursery Rhymes & Kids Songs', 'D Billions',\n",
              "       'Coldplay', 'Goldmines Bollywood', '1theK (원더케이)',\n",
              "       'TRANS7 OFFICIAL', 'Chloe Ting', 'Amit Bhadana',\n",
              "       '★ Kids Roma Show', 'Collins Key', 'KSI', 'DJ Snake', 'ABPLIVE',\n",
              "       'Ninja', 'The Lallantop', 'James Charles', 'WB Kids', 'Anuel AA',\n",
              "       'Logan Paul', 'netd müzik', 'Frost Diamond', 'Like Nastya AE',\n",
              "       'Enrique Iglesias', 'Happy Lives', 'MrBeast en Español',\n",
              "       'NickyJamTV', 'Mister Max', 'Troom Troom', 'Mark Rober',\n",
              "       'Erlania e Valentina Pontes', 'Miss Katy', 'Jelly', 'Indosiar',\n",
              "       \"America's Got Talent\", 'Sesame Street', 'Diana and Roma ARA',\n",
              "       'Venus Movies', 'YOLO AVENTURAS', 'Pen Movies', 'Technical Guruji',\n",
              "       'Goldmines Movies', 'Peppa Pig Español Latino - Canal Oficial',\n",
              "       'FaZe Rug', 'DrossRotzank', 'Zhong', 'Lady Gaga',\n",
              "       'GMM GRAMMY OFFICIAL', 'Preston', 'LankyBox', 'White Hill Music',\n",
              "       'The Chainsmokers', 'Smile Family', 'TED', 'Juan De Dios Pantoja',\n",
              "       'mmoshaya', 'Wave Music Bhojpuri', 'Paulo Londra', 'Sia',\n",
              "       'BabyBus - Canciones Infantiles & Videos para Niños',\n",
              "       'Diana and Roma EN', 'OneDirectionVEVO', 'Like Nastya PRT',\n",
              "       'SSundee', 'Charlie Puth', 'Ultra Movie Parlour',\n",
              "       'Goldmines Cineplex', 'FGTeeV', 'Maya and Mary', 'Dua Lipa',\n",
              "       'Dushyant kukreja', 'Beast Reacts', 'Alan Becker',\n",
              "       'Kids TV - Nursery Rhymes And Baby Songs', 'NichLmao', 'nigahiga',\n",
              "       'Vlad and Niki Arabic', 'National Geographic',\n",
              "       'Disney Latinoamérica', 'Tasty', 'toyorbabytv', 'Rotana',\n",
              "       'Becky G', '5-Minute Crafts DIY', 'Baim Paula', 'Sun TV',\n",
              "       'Kinder Spielzeug Kanal', 'Canal Canalha', 'Tlnovelas',\n",
              "       'Netflix India', 'Tekashi 6ix9ine', 'Brave Wilderness',\n",
              "       'Vania Mania Kids', 'Family GamesTV', 'Lyrical Lemonade',\n",
              "       'Dr. Vivek Bindra: Motivational Speaker', 'Avicii', 'Junya.じゅんや',\n",
              "       'GMA Public Affairs', 'BETER BÖCÜK', 'Eva Bravo Play', 'LazarBeam',\n",
              "       'Jake Paul', 'BuzzFeedVideo', 'Romeo Santos', 'Alejo Igoa',\n",
              "       'invictor', 'SlivkiShow', 'Totoy kids - Português',\n",
              "       '5-Minute Crafts PLAY', 'AuthenticGames', 'Gulshan Kalra',\n",
              "       'Mnet K-POP', 'mujjuu___14', 'Pencilmation', 'Skrillex',\n",
              "       'Pentatonix', 'Marvel Entertainment', 'Infinite', 'Vevo', 'REACT',\n",
              "       'HaerteTest', 'Kurzgesagt – In a Nutshell', 'Got Talent Global',\n",
              "       'Fatos Desconhecidos', 'Khan GS Research Centre', 'Noor Stars',\n",
              "       'Dan Rhodes', 'Tilak', 'The Royalty Family', 'Deddy Corbuzier',\n",
              "       'JennaMarbles', 'Linkin Park', 'Gusttavo Lima Oficial', 'NBA',\n",
              "       'Ninja Kidz TV', 'Robin Hood Gamer', 'Gordon Ramsay',\n",
              "       'Daniel LaBelle', 'Minecraft - Topic', 'Village Cooking Channel',\n",
              "       'BabyBus - Cerita & Lagu Anak-anak', 'Troom Troom Es', 'shane',\n",
              "       'Green Gold TV - Official Channel', 'Clash of Clans', 'AS Gaming',\n",
              "       'JukiLop', 'Sourav Joshi Vlogs', 'Rafa & Luiz', 'DLS News',\n",
              "       'TRT Originals Urdu', 'CookieSwirlC',\n",
              "       \"हिंदी - Genevieve's Playhouse\", 'Vlad and Niki IDN',\n",
              "       \"Britain's Got Talent\", 'Jimmy Kimmel Live', 'MiawAug',\n",
              "       'Crafty Panda', 'Official Pink Panther', 'SCTV', 'Lil Nas X',\n",
              "       'DUDU e CAROL', 'Sonotek', 'Sidhu Moose Wala', 'Calvin Harris',\n",
              "       'Cardi B', 'ElTrollino', 'TheOdd1sOut', 'Emiway Bantai', 'HiMan',\n",
              "       'Vijay Television',\n",
              "       'Kiddiestv Hindi - Nursery Rhymes & Kids Songs', 'Мирошка ТВ',\n",
              "       'Stokes Twins', 'KBS WORLD TV', 'FIFA', 'The ACE Family',\n",
              "       'Turma da Mônica', 'etvteluguindia', 'CKN', 'shakiraVEVO',\n",
              "       'Shorts Break', 'Farruko', 'TheWillyrex', 'Познаватель',\n",
              "       'Little Angel Español - Canciones Infantiles',\n",
              "       'Dan-Sa / Daniel Saboya', 'PDK Films', 'Vsauce', 'Bizarrap',\n",
              "       'MrBeast 2', '7clouds', 'Unbox Therapy', 'INCRÍVEL',\n",
              "       'That Little Puff', 'GEN HALILINTAR', 'Sony AATH', 'SOMOY TV',\n",
              "       'Good Mythical Morning', 'Ali-A', 'TED-Ed',\n",
              "       'Naisa Alifia Yuriza (N.A.Y)', 'Like Nastya Vlog', 'Marmok',\n",
              "       'RsiamMusic : อาร์สยาม', 'Masha e o Urso', 'David Dobrik',\n",
              "       'RKD Studios', 'Zach Choi ASMR', 'SUPER SLICK SLIME SAM',\n",
              "       'GRAMMY GOLD OFFICIAL', 'Demi Lovato', 'Vlad and Niki ESP', 'YOLO',\n",
              "       'Lele Pons', 'ArianaGrandeVevo', 'Mother Goose Club Playhouse',\n",
              "       'officialpsy', 'Sebastián Yatra', 'TheGrefg', 'Lil Pump',\n",
              "       'LIV Crime', 'Dhar Mann', 'SQUEEZIE', 'RobleisIUTU', 'Sidemen',\n",
              "       'شبكة العاب العرب | Arab Games Network', 'Porta dos Fundos',\n",
              "       'unknown boy varun', 'Goldmines Great Indian Comedy', 'JFlaMusic',\n",
              "       'FactTechz', 'Alan Chikin Chow', 'Dangal TV Channel',\n",
              "       'Shemaroo Comedy', 'Triggered Insaan', 'Fede Vigevani',\n",
              "       'Stubborn Facts', 'Smile Family Spanish', 'Manual do Mundo',\n",
              "       'Jane ASMR 제인', '李子柒 Liziqi', 'PopularMMOs', 'SonyMusicSouthVEVO',\n",
              "       'IGN', 'الـريماس - Al-Remas', 'Jason Derulo', 'Zuni and Family',\n",
              "       'Liza Koshy', 'Willyrex', 'Blippi - Educational Videos for Kids',\n",
              "       'HowToBasic', 'Akshay Nagwadiya', 'LuisFonsiVEVO', 'Gaby and Alex',\n",
              "       'zbing z.', 'Anitta', 'EeOneGuy', 'Katie Angel', 'tanboy kun',\n",
              "       'Ben Azelart', 'Guava Juice', 'Busy Fun Ltd',\n",
              "       'Doggy Doggy Cartoons', 'Azhan5star', 'News24', 'TheBrianMaps',\n",
              "       'Apple', 'SMOL', 'MissaSinfonia', 'Jason Vlogs',\n",
              "       'TRANS TV Official', 'And TV', \"Les' Copaque Production\",\n",
              "       'Wow Kidz Action', 'Miley Cyrus', 'Tu COSMOPOLIS', 'DeToxoMoroxo',\n",
              "       'Prajapati News', 'Queen Official', 'Like Nastya VNM',\n",
              "       'Spider Slack', 'El Reino a Jugar', 'Marques Brownlee',\n",
              "       'Werever2morro', 'Tsuriki Show', 'The Game Theorists',\n",
              "       'AMARINTV : อมรินทร์ทีวี', 'VICE', 'IDEAS EN 5 MINUTOS',\n",
              "       'Aayu and Pihu Show', 'Travis Scott', 'FailArmy',\n",
              "       'Pop Chartbusters', 'ExtraPolinesios', 'Kaykai Salaider',\n",
              "       'Sandra Cires Art', 'W2S', 'PANDA BOI', 'Ivana Alawi',\n",
              "       'JJ Olatunji', 'Sagawa /さがわ', 'Little Mix', 'Boyce Avenue',\n",
              "       'Gato Galactico | GALÁXIA', 'Kids Play', 'Canal IN', 'Pitbull',\n",
              "       'With Kids[위드키즈]', 'FunFun Toy Doll TV', 'Camila Cabello',\n",
              "       'Matt Stonie', 'Antrax', 'Like Nastya IDN',\n",
              "       'RCTI - LAYAR DRAMA INDONESIA', 'Jennifer Lopez', 'AdMe',\n",
              "       'jeffreestar', 'DopeLyrics', 'Enes Batur', 'El Payaso Plim Plim',\n",
              "       'SAM SMITH', 'SriBalajiMovies', 'Lahari Music | T-Series',\n",
              "       'wifistudy', 'FitDance', 'T3ddy', 'Technoblade',\n",
              "       'Rotten Tomatoes Trailers', 'Ch7HD', 'Dyland PROS', 'Live',\n",
              "       'Caeli YT', 'POPS Kids', 'GMMTV OFFICIAL\\u200b\\u200b', 'NMF News',\n",
              "       'Camilo', 'BBC News Hindi', 'News18 India',\n",
              "       'MSA previously My Story Animated', 'CoryxKenshin', 'LEGO',\n",
              "       'Дима Масленников', 'Thairath Online', 'La Rosa de Guadalupe',\n",
              "       'Roman Atwood Vlogs', 'LOKESH GAMER', 'Kerajinan 5-Menit',\n",
              "       'MK MUSIC', 'Aphmau', 'Henrique e Juliano', 'Volga Video',\n",
              "       'Super Senya', 'TWICE', 'Zach King', 'IShowSpeed',\n",
              "       '5-Minute Crafts FAMILY', 'حِرف إبداعية في 5 دقائق', 'Musas',\n",
              "       'Harsh Beniwal', 'Oyuncak Avı', 'Talking Tom & Friends',\n",
              "       'Totoy kids - Español', 'zayn', 'Ranz Kyle', 'Linus Tech Tips',\n",
              "       'Taarak Mehta Ka Ooltah Chashmah', 'Marta and Rustam', 'AdeleVEVO',\n",
              "       'Ajay Sharma', 'Team Films Bhojpuri', 'Makiman131', 'TheRichest',\n",
              "       'League of Legends', 'NDTV India', 'Arif muhammad', 'Mariale',\n",
              "       'Niana Guerrero', 'Dave and Ava - Nursery Rhymes and Baby Songs',\n",
              "       'Unspeakable', 'НТВ', 'BIGBANG', 'Lyna', 'Zee Music Classic',\n",
              "       'Daftar Populer', 'Mobile Legends: Bang Bang Official',\n",
              "       \"It's Mamix\", 'Vlad and Niki ARA', 'Kwebbelkop', 'Genierock',\n",
              "       'Zé Neto e Cristiano', 'UFC - Ultimate Fighting Championship',\n",
              "       'Lachlan', 'ERB', 'iTownGamePlay *Terror&Diversión*',\n",
              "       'Reaction Time', 'Fueled By Ramen', 'Major Lazer Official',\n",
              "       'Jorge & Mateus Oficial', 'Blippi Español', 'How Ridiculous',\n",
              "       'Planeta das Gêmeas', 'MattyBRaps', 'The Slow Mo Guys',\n",
              "       'CollegeHumor', 'حقائق وأسرار', 'IDEIAS INCRÍVEIS', 'Dear Sir',\n",
              "       'XpressTV', 'LeoNata Family', 'CNN', 'ABS-CBN News', 'PlayStation',\n",
              "       'Lilly Singh', 'Canal Nostalgia', 'les boys tv2', 'Maha Fun Tv',\n",
              "       'O Canal do Joãozinho - Little Angel Português', 'Kuplinov ► Play',\n",
              "       'Chad Wild Clay', 'EdisonPts', 'Yoeslan', 'LEGENDA FUNK',\n",
              "       'Drawblogs', 'Fifth Harmony', 'Martin Garrix',\n",
              "       'Boram Tube ToysReview [보람튜브 토이리뷰]', 'Daily Dose Of Internet',\n",
              "       'Hongyu ASMR 홍유', 'FC Barcelona', 'Gyan Gamingㅤ', 'Maroon5VEVO',\n",
              "       'SelenaGomezVEVO', 'Jake Fellman', 'Hear This Music', 'Kim Loaiza',\n",
              "       'Super Polina', 'A2 Motivation by Arvind Arora',\n",
              "       'ช่อง8 : Thai Ch8', 'DM - Desi Melodies',\n",
              "       'Mohamed Ramadan I محمد رمضان', 'Jordan Matter', 'Rclbeauty101',\n",
              "       'Cyprien', 'انصالة فاميلي I أنس و أصالة', 'Bispo Bruno Leonardo',\n",
              "       'CrashCourse', 'ГЛЕНТ', 'Mazhavil Manorama', '50 Cent',\n",
              "       'SIS vs BRO', 'Трум Трум', 'SRK MUSIC', 'Camila Loures',\n",
              "       'Rosanna Pansino', 'Auron', '5-Minute Crafts Recycle',\n",
              "       'Invento na Hora', 'Doc Tops', 'Disney Junior', 'KOMPASTV',\n",
              "       'MNCTV OFFICIAL', 'Infobells Bangla', 'Saad Lamjarred | سعد لمجرد',\n",
              "       'The MriDul', '#Refugio Mental', 'NikkieTutorials',\n",
              "       'Mis Pastelitos', 'F2Freestylers - Ultimate Soccer Skills Channel',\n",
              "       'Мастерская Настроения', 'MalumaVEVO', 'Aadishakti Films',\n",
              "       'Katakit Baby TV', 'Trap City', 'melanie martinez', 'Harry Styles',\n",
              "       'Zig & Sharko', 'PrestonPlayz', 'AM3NlC', 'Like Nastya Stories',\n",
              "       'ABC News', 'O Reino Infantil', 'Telemundo', 'TazerCraft',\n",
              "       'Bie The Ska', 'Juliana Baltar', 'GMM25Thailand', 'Neha Kakkar',\n",
              "       'PowerfulJRE', 'Ishaan Ali 11', 'ماشا و الدب', 'tuzelity SHUFFLE',\n",
              "       'DangMattSmith', 'NOBRU', 'T-Series Hamaar Bhojpuri',\n",
              "       'Darkar Company Studios', 'ZEE5', 'Sony Music South',\n",
              "       'Ray William Johnson', 'Wish 107.5', 'ADEL et SAMI', 'Coke Studio',\n",
              "       'Narins Beauty', 'MAIKI021', 'TV Ana Emilia', 'FFUNTV',\n",
              "       'Danny Fitt', 'BBC News', 'Narendra Modi', 'Wengie', 'PlayHard',\n",
              "       'StudyIQ IAS', 'Gallina Pintadita', 'Wesley Safadão', 'Crazy Frog',\n",
              "       'infobells', '123 GO! Spanish', 'MyMissAnand', 'Atlantic Records',\n",
              "       'dednahype', 'ETV Jabardasth', 'Sony LIV', 'FAPTV',\n",
              "       'Lindsey Stirling', 'The World Adventures हिन्दी', 'JD Pantoja',\n",
              "       'Netflix Jr.', 'Поззи', 'Rebecca Zamolo', 'AzzyLand',\n",
              "       'Desi Gamers', 'H2ODelirious', 'Crescendo com Luluca',\n",
              "       'T-Series Regional', 'Veritasium', 'Conor Maynard', 'jbalvinVEVO',\n",
              "       'Saturday Night Live', 'The Q', 'Kurt Hugo Schneider', 'Anaysa',\n",
              "       'NishaMadhulika', 'BBC', 'Zee Telugu', 'karameeshchannel',\n",
              "       'Meghan Trainor', 'theRadBrad', 'Jazzghost', 'VexTrex',\n",
              "       'Brawl Stars', 'Matt Steffanina', 'JOJO TV - Hindi Stories',\n",
              "       'Typical Gamer', 'أترو/Atro', 'O Que Não Dizer Oficial',\n",
              "       'Jamuna TV', 'Kids TV India Hindi Nursery Rhymes',\n",
              "       'The LaBrant Fam', 'ATHLEAN-X™', 'DALLMYD',\n",
              "       'Alex Gonzaga Official', 'Come Play With Me', 'Lady Diana',\n",
              "       'sagar kalra (Shorts)', 'Think Music India',\n",
              "       'Hacksmith Industries', 'Matheus Yurley', 'CookingShooking Hindi',\n",
              "       'Mythpat', 'Calon Sarjana', 'Everson Zoio', 'Zee Bangla', 'RedeTV',\n",
              "       'twenty one pilots', 'Ei Nerd', 'Goldmines Premiere', 'DJ Khaled',\n",
              "       'Mrwhosetheboss', 'Top Viral Talent', 'EnriqueIglesiasVEVO',\n",
              "       'Colors Rishtey', 'RS 1313 SHORTS', 'Компот', 'Lana Del Rey',\n",
              "       'Awakening Music', 'Hungria Hip Hop', 'The Shiny Peanut',\n",
              "       'DeGoBooM', 'Peppa Pig em Português Brasil - Canal Oficial',\n",
              "       'BeyoncéVEVO', '#Refúgio Mental', 'Trakin Tech',\n",
              "       \"Kabita's Kitchen\", 'BIBO와 장난감', '7 Minutoz',\n",
              "       'Knowledge Tv हिन्दी', 'MrSuicideSheep', 'Ami Rodriguez',\n",
              "       'E-MasterSensei', 'Geo News', 'GMA News', 'Codiscos',\n",
              "       'Blockbuster Movies', 'TV9 Bharatvarsh', 'The Dodo', 'Luli Pampín',\n",
              "       'The Infographics Show', 'Lokdhun Punjabi', 'Sonotek Bhakti',\n",
              "       'Indore Physical Academy', 'Wolfoo Channel', 'Yudist Ardhana',\n",
              "       'RaptorGamer', 'Kids Line♡キッズライン', 'JesseAndMike', 'Влад и Никита',\n",
              "       'Troom Troom India', 'My Mate Nate', 'gymvirtual', 'Davie504',\n",
              "       'NickiMinajAtVEVO', 'Луномосик', 'Blossom', 'Adexe & Nau',\n",
              "       'BanderitaX', 'Technology Gyan', 'Health Time',\n",
              "       'Melon City Show - برنامج ولاية بطيخ', 'WiederDude',\n",
              "       'elliegoulding', 'TKOR', 'Vogue', 'Ja Mill', 'Priyal Kukreja',\n",
              "       'Little Baby Bum en Español', 'Republic Bharat', 'Parafernalha',\n",
              "       'Talking Angela', 'CaseyNeistat', 'Piuzinho', 'SAAIHALILINTAR',\n",
              "       'Jass Records', 'LOUD', 'Koray Zeynep', 'Heidi and Zidane HZHtube',\n",
              "       'DisneyChannelUK', 'Rauw Alejandro', 'Future',\n",
              "       'Just For Laughs Gags', 'Heroindori', 'Duo Tiempo De Sol',\n",
              "       'infobells - Kannada', 'Troom Troom PT', 'Gibby :)',\n",
              "       'People Vs Food', 'Wolfoo Family', 'Eli Kids - Cartoons & Songs',\n",
              "       'Migos ATL', 'Acenix', 'Más SKabeche', 'SR Toys Collection',\n",
              "       '办公室小野 Ms Yeah', '웃웃TwinsFromRussia', 'Akon', 'Wave Music Bhakti',\n",
              "       'NDTV', 'CHHOTU KI MASTI', 'Its JoJo Siwa', 'MC Divertida',\n",
              "       'Troom Troom Indonesia', 'jaanvi patel',\n",
              "       'YoungBoy Never Broke Again', 'SEVENGERS',\n",
              "       'DaniRep | +6 Vídeos Diarios De GTA 5 Online!', 'Ice Cream Rolls',\n",
              "       'colinfurze', 'Kylie Jenner', 'Bela Bagunça', 'deepesh zo',\n",
              "       'Timba Vk', 'THE BROWN SIBLINGS', 'Yair17', 'penguinz0',\n",
              "       'Avril Lavigne', 'Heidi y Zidane', 'Маша та Ведмідь', '123 GO!',\n",
              "       'Lulu99', 'Panda', 'Nat and Essie', 'Planet Earth INDIA',\n",
              "       'eltrece', 'NATTI NATASHA', 'Mor Haryanvi', 'Diana and Roma IND',\n",
              "       'Quantum Tech HD', 'Franco Escamilla', 'Pastor Antônio Júnior',\n",
              "       'TsMadaan', 'Hero Movies 2023', 'Topper Guild', 'Willie Salim',\n",
              "       'MBC مصر', 'First We Feast', 'Rubius Z', 'Black Eyed Peas',\n",
              "       \"Pari's Lifestyle\", 'CNCO', 'AlArabiya العربية', 'Luan Santana',\n",
              "       'DANIEL EL TRAVIESO VIDEOS',\n",
              "       'KaKa Kids TV - Nursery Rhymes Kids Animated Songs', 'Kluna Tik',\n",
              "       'Make Joke Of', 'Lofi Girl', 'GoldminesAction', 'emma chamberlain',\n",
              "       'ChrisBrownVEVO', 'Kashvi Adlakha', 'Jaiden Animations',\n",
              "       'MORGENSHTERN', 'Norman', 'bharatzkitchen HINDI', 'EU FICO LOKO',\n",
              "       'CalvinHarrisVEVO', 'Flowers Comedy', 'P!NK', \"Wild 'N Out\",\n",
              "       'Koo Koo TV - Hindi', 'LipaoGamer', 'MrGear', 'TWO SIDE GAMERS',\n",
              "       'TommyInnit', 'Naz | ناز', 'FrontaL Gaming', 'Halsey',\n",
              "       'Kendrick Lamar', 'Lil Wayne',\n",
              "       'الجانب المُشرق | Bright Side Arabic', 'Garena Free Fire LATAM',\n",
              "       'POCOYÓ en ESPAÑOL - Canal Oficial', 'Chetan Monga Vlogs',\n",
              "       'elcarteldesantatv', 'BBC Earth', 'SBT', 'Tfue',\n",
              "       'Yoga With Adriene', 'Dani Russo Tv', 'Free Fire India Official',\n",
              "       'Noman Official', 'BIBO и Игрушки', 'Machinima', 'Mundo Bita',\n",
              "       'Salman Noman', 'Single Track Studio', 'Stray Kids',\n",
              "       'Gustavo Paródias', 'CrazyRussianHacker', 'Biper y sus Amigos',\n",
              "       'CarryisLive', 'Airrack', 'Vy Qwaint', 'Toys Make Me Smile',\n",
              "       'ZutiGang', 'Flamingo', 'Brancoala', 'Annoying Orange', 'Zee Kids',\n",
              "       'ARY News', 'Star Casablanca | نجوم الدار البيضاء', 'Maymo',\n",
              "       '설기양SULGI', 'The Film Theorists', 'ToysPlay', 'Morgz', 'XO TEAM',\n",
              "       'Nirahua Music World', 'YtCrash', 'Painzeiro', 'Oum Walid'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "oQcfHV8SmMa9",
        "outputId": "75f426e7-5dc9-4f92-b080-dd970ec76b26"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rank             youtube_channel  subscribers      video_views video_count  \\\n",
              "0     1                    T-Series  234,000,000  212,900,271,553      18,515   \n",
              "1     2              YouTube Movies  161,000,000                0           0   \n",
              "2     3  Cocomelon - Nursery Rhymes  152,000,000  149,084,178,448         846   \n",
              "3     4                   SET India  150,000,000  137,828,094,104     103,200   \n",
              "4     5                     MrBeast  128,000,000   21,549,128,785         733   \n",
              "\n",
              "           category  started  \n",
              "0             Music     2006  \n",
              "1  Film & Animation     2015  \n",
              "2         Education     2006  \n",
              "3             Shows     2006  \n",
              "4     Entertainment     2012  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a123c767-89ef-447e-a489-c33cc88d16c0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>youtube_channel</th>\n",
              "      <th>subscribers</th>\n",
              "      <th>video_views</th>\n",
              "      <th>video_count</th>\n",
              "      <th>category</th>\n",
              "      <th>started</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>T-Series</td>\n",
              "      <td>234,000,000</td>\n",
              "      <td>212,900,271,553</td>\n",
              "      <td>18,515</td>\n",
              "      <td>Music</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>YouTube Movies</td>\n",
              "      <td>161,000,000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Film &amp; Animation</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Cocomelon - Nursery Rhymes</td>\n",
              "      <td>152,000,000</td>\n",
              "      <td>149,084,178,448</td>\n",
              "      <td>846</td>\n",
              "      <td>Education</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>SET India</td>\n",
              "      <td>150,000,000</td>\n",
              "      <td>137,828,094,104</td>\n",
              "      <td>103,200</td>\n",
              "      <td>Shows</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>MrBeast</td>\n",
              "      <td>128,000,000</td>\n",
              "      <td>21,549,128,785</td>\n",
              "      <td>733</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>2012</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a123c767-89ef-447e-a489-c33cc88d16c0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a123c767-89ef-447e-a489-c33cc88d16c0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a123c767-89ef-447e-a489-c33cc88d16c0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.category.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "0seAy6CwmRK8",
        "outputId": "3ce67f86-f4c8-4095-b2e7-0eb59f325d38"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Entertainment                                                                   238\n",
              "Music                                                                           217\n",
              "People & Blogs                                                                  132\n",
              "Gaming                                                                           94\n",
              "Comedy                                                                           68\n",
              "Film & Animation                                                                 50\n",
              "Education                                                                        45\n",
              "Howto & Style                                                                    43\n",
              "https://us.youtubers.me/global/all/top-1000-most_subscribed-youtube-channels     30\n",
              "News & Politics                                                                  27\n",
              "Science & Technology                                                             18\n",
              "Shows                                                                            14\n",
              "Sports                                                                           10\n",
              "Pets & Animals                                                                    6\n",
              "Trailers                                                                          2\n",
              "Nonprofits & Activism                                                             2\n",
              "Movies                                                                            2\n",
              "Autos & Vehicles                                                                  1\n",
              "Travel & Events                                                                   1\n",
              "Name: category, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.groupby(['category']).subscribers.agg([len , max , min])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "gCczkXVvmzdz",
        "outputId": "d7b0400f-a34c-4287-d1ae-2e2ee74cfe93"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    len         max  \\\n",
              "category                                                              \n",
              "Autos & Vehicles                                      1  18,900,000   \n",
              "Comedy                                               68  44,000,000   \n",
              "Education                                            45  64,600,000   \n",
              "Entertainment                                       238  92,700,000   \n",
              "Film & Animation                                     50  81,200,000   \n",
              "Gaming                                               94  47,000,000   \n",
              "Howto & Style                                        43  78,500,000   \n",
              "Movies                                                2  26,400,000   \n",
              "Music                                               217  91,600,000   \n",
              "News & Politics                                      27  55,300,000   \n",
              "Nonprofits & Activism                                 2  37,300,000   \n",
              "People & Blogs                                      132  83,900,000   \n",
              "Pets & Animals                                        6  20,600,000   \n",
              "Science & Technology                                 18  29,800,000   \n",
              "Shows                                                14  76,400,000   \n",
              "Sports                                               10  92,800,000   \n",
              "Trailers                                              2  39,500,000   \n",
              "Travel & Events                                       1  12,300,000   \n",
              "https://us.youtubers.me/global/all/top-1000-mos...   30  93,300,000   \n",
              "\n",
              "                                                            min  \n",
              "category                                                         \n",
              "Autos & Vehicles                                     18,900,000  \n",
              "Comedy                                               11,600,000  \n",
              "Education                                            11,400,000  \n",
              "Entertainment                                        11,500,000  \n",
              "Film & Animation                                     11,500,000  \n",
              "Gaming                                               11,500,000  \n",
              "Howto & Style                                        11,500,000  \n",
              "Movies                                               21,600,000  \n",
              "Music                                                11,500,000  \n",
              "News & Politics                                      11,500,000  \n",
              "Nonprofits & Activism                                14,400,000  \n",
              "People & Blogs                                      104,000,000  \n",
              "Pets & Animals                                       11,500,000  \n",
              "Science & Technology                                 11,600,000  \n",
              "Shows                                                11,500,000  \n",
              "Sports                                               12,700,000  \n",
              "Trailers                                             35,200,000  \n",
              "Travel & Events                                      12,300,000  \n",
              "https://us.youtubers.me/global/all/top-1000-mos...   11,900,000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9949bf1b-d660-4e58-839e-233e1e291f9c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>len</th>\n",
              "      <th>max</th>\n",
              "      <th>min</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>category</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Autos &amp; Vehicles</th>\n",
              "      <td>1</td>\n",
              "      <td>18,900,000</td>\n",
              "      <td>18,900,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Comedy</th>\n",
              "      <td>68</td>\n",
              "      <td>44,000,000</td>\n",
              "      <td>11,600,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>45</td>\n",
              "      <td>64,600,000</td>\n",
              "      <td>11,400,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Entertainment</th>\n",
              "      <td>238</td>\n",
              "      <td>92,700,000</td>\n",
              "      <td>11,500,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Film &amp; Animation</th>\n",
              "      <td>50</td>\n",
              "      <td>81,200,000</td>\n",
              "      <td>11,500,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gaming</th>\n",
              "      <td>94</td>\n",
              "      <td>47,000,000</td>\n",
              "      <td>11,500,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Howto &amp; Style</th>\n",
              "      <td>43</td>\n",
              "      <td>78,500,000</td>\n",
              "      <td>11,500,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Movies</th>\n",
              "      <td>2</td>\n",
              "      <td>26,400,000</td>\n",
              "      <td>21,600,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Music</th>\n",
              "      <td>217</td>\n",
              "      <td>91,600,000</td>\n",
              "      <td>11,500,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>News &amp; Politics</th>\n",
              "      <td>27</td>\n",
              "      <td>55,300,000</td>\n",
              "      <td>11,500,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Nonprofits &amp; Activism</th>\n",
              "      <td>2</td>\n",
              "      <td>37,300,000</td>\n",
              "      <td>14,400,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>People &amp; Blogs</th>\n",
              "      <td>132</td>\n",
              "      <td>83,900,000</td>\n",
              "      <td>104,000,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pets &amp; Animals</th>\n",
              "      <td>6</td>\n",
              "      <td>20,600,000</td>\n",
              "      <td>11,500,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Science &amp; Technology</th>\n",
              "      <td>18</td>\n",
              "      <td>29,800,000</td>\n",
              "      <td>11,600,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Shows</th>\n",
              "      <td>14</td>\n",
              "      <td>76,400,000</td>\n",
              "      <td>11,500,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sports</th>\n",
              "      <td>10</td>\n",
              "      <td>92,800,000</td>\n",
              "      <td>12,700,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Trailers</th>\n",
              "      <td>2</td>\n",
              "      <td>39,500,000</td>\n",
              "      <td>35,200,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Travel &amp; Events</th>\n",
              "      <td>1</td>\n",
              "      <td>12,300,000</td>\n",
              "      <td>12,300,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>https://us.youtubers.me/global/all/top-1000-most_subscribed-youtube-channels</th>\n",
              "      <td>30</td>\n",
              "      <td>93,300,000</td>\n",
              "      <td>11,900,000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9949bf1b-d660-4e58-839e-233e1e291f9c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9949bf1b-d660-4e58-839e-233e1e291f9c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9949bf1b-d660-4e58-839e-233e1e291f9c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.plot(kind = \"line\" , x = 'youtube channel' , y = 'rank' , title='Youtube Channel Rank' )"
      ],
      "metadata": {
        "id": "NBxU4EI6chCa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "d068e108-565c-47e7-c5be-03e7dad78d00"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f55410d5700>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.plot(kind = \"box\" , x = 'youtube channel' , y = 'rank' , title='Youtube Channel Rank' )\n"
      ],
      "metadata": {
        "id": "WjxbJWt3pyFm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "e4fee49d-8348-4a66-e8d8-f1f6cd67bad8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5541012a60>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.plot(kind = 'scatter', x ='youtube_channel', y ='video_count' , title='YouTube Video Count' , xlabel='YouTube Channel' , ylabel='Video Count')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 5992
        },
        "id": "7Gpj5QEanqXJ",
        "outputId": "7a955f62-e317-4be0-efd0-3520e3414ae6"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f552f5d9d00>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3594 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3656 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3629 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3591 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 48372 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 46988 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 53916 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 48652 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51060 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47196 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44536 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 46020 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 45208 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2357 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2381 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2354 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2366 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2342 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2324 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2352 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2344 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2367 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2325 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2340 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50896 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 45908 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 52992 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12376 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12421 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12435 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12420 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2361 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2306 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 2368 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3634 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3619 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3660 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3626 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3618 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3617 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51228 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51064 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 26446 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 23376 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 26578 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3636 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3609 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3607 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3637 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 3623 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12373 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12364 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12431 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50948 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 46300 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 53412 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51592 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 53664 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47532 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 48624 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 54861 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50976 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12644 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50752 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51109 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 45212 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44048 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12461 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12483 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12474 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12521 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12452 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 12531 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 21150 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 20844 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 23460 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 23567 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 37326 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50883 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 49444 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44592 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50577 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3594 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3656 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3629 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3591 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 48372 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 46988 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 53916 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 48652 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51060 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47196 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44536 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 46020 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 45208 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2357 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2381 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2354 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2366 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2342 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2324 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2352 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2344 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2367 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2325 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2340 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50896 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 45908 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 52992 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12376 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12421 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12435 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12420 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2361 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2306 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 2368 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3634 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3619 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3660 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3626 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3618 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3617 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51228 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51064 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 26446 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 23376 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 26578 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3636 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3609 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3607 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3637 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 3623 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12373 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12364 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12431 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50948 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 46300 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 53412 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51592 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 53664 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47532 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 48624 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 54861 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50976 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12644 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50752 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51109 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 45212 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44048 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12461 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12483 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12474 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12521 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12452 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 12531 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 21150 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 20844 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 23460 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 23567 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 37326 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50883 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 49444 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44592 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n",
            "/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50577 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "sns.pairplot(data_frame)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "_nUu4YPHpCpf",
        "outputId": "bb2bd050-fbff-4659-b349-c31872f84cd2"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7f552ed1d790>"
            ]
          },
          "metadata": {},
          "execution_count": 78
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 6 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "duWHgML7susz",
        "outputId": "d60fe753-0328-468f-eb17-ebb5462859f5"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rank             youtube_channel  subscribers      video_views video_count  \\\n",
              "0     1                    T-Series  234,000,000  212,900,271,553      18,515   \n",
              "1     2              YouTube Movies  161,000,000                0           0   \n",
              "2     3  Cocomelon - Nursery Rhymes  152,000,000  149,084,178,448         846   \n",
              "3     4                   SET India  150,000,000  137,828,094,104     103,200   \n",
              "4     5                     MrBeast  128,000,000   21,549,128,785         733   \n",
              "\n",
              "           category  started  \n",
              "0             Music     2006  \n",
              "1  Film & Animation     2015  \n",
              "2         Education     2006  \n",
              "3             Shows     2006  \n",
              "4     Entertainment     2012  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b52ddb2c-eb36-4d1e-90c9-4da55898924f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>youtube_channel</th>\n",
              "      <th>subscribers</th>\n",
              "      <th>video_views</th>\n",
              "      <th>video_count</th>\n",
              "      <th>category</th>\n",
              "      <th>started</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>T-Series</td>\n",
              "      <td>234,000,000</td>\n",
              "      <td>212,900,271,553</td>\n",
              "      <td>18,515</td>\n",
              "      <td>Music</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>YouTube Movies</td>\n",
              "      <td>161,000,000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Film &amp; Animation</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Cocomelon - Nursery Rhymes</td>\n",
              "      <td>152,000,000</td>\n",
              "      <td>149,084,178,448</td>\n",
              "      <td>846</td>\n",
              "      <td>Education</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>SET India</td>\n",
              "      <td>150,000,000</td>\n",
              "      <td>137,828,094,104</td>\n",
              "      <td>103,200</td>\n",
              "      <td>Shows</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>MrBeast</td>\n",
              "      <td>128,000,000</td>\n",
              "      <td>21,549,128,785</td>\n",
              "      <td>733</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>2012</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b52ddb2c-eb36-4d1e-90c9-4da55898924f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b52ddb2c-eb36-4d1e-90c9-4da55898924f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b52ddb2c-eb36-4d1e-90c9-4da55898924f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "bike = pd.read_csv('sample_data/bike_dataset.csv' , names=['bike_name' , 'price' , 'city' , 'kms_driven','owner' , 'age' , 'power','brand'])\n",
        "bike.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "O_Gm9X1Ct7Nt",
        "outputId": "32b9b4e0-9744-4cdd-a804-4f7cc2f4e1a5"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              bike_name   price       city  kms_driven  \\\n",
              "0    TVS Star City Plus Dual Tone 110cc   35000  Ahmedabad       17654   \n",
              "1           Royal Enfield Classic 350cc  119900      Delhi       11000   \n",
              "2                  Triumph Daytona 675R  600000      Delhi         110   \n",
              "3                  TVS Apache RTR 180cc   65000  Bangalore       16329   \n",
              "4  Yamaha FZ S V 2.0 150cc-Ltd. Edition   80000  Bangalore       10000   \n",
              "\n",
              "         owner  age  power          brand  \n",
              "0  First Owner    3    110            TVS  \n",
              "1  First Owner    4    350  Royal Enfield  \n",
              "2  First Owner    8    675        Triumph  \n",
              "3  First Owner    4    180            TVS  \n",
              "4  First Owner    3    150         Yamaha  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38da1531-72c4-424f-ace8-a9e26c5b060b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>bike_name</th>\n",
              "      <th>price</th>\n",
              "      <th>city</th>\n",
              "      <th>kms_driven</th>\n",
              "      <th>owner</th>\n",
              "      <th>age</th>\n",
              "      <th>power</th>\n",
              "      <th>brand</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TVS Star City Plus Dual Tone 110cc</td>\n",
              "      <td>35000</td>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>17654</td>\n",
              "      <td>First Owner</td>\n",
              "      <td>3</td>\n",
              "      <td>110</td>\n",
              "      <td>TVS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Royal Enfield Classic 350cc</td>\n",
              "      <td>119900</td>\n",
              "      <td>Delhi</td>\n",
              "      <td>11000</td>\n",
              "      <td>First Owner</td>\n",
              "      <td>4</td>\n",
              "      <td>350</td>\n",
              "      <td>Royal Enfield</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Triumph Daytona 675R</td>\n",
              "      <td>600000</td>\n",
              "      <td>Delhi</td>\n",
              "      <td>110</td>\n",
              "      <td>First Owner</td>\n",
              "      <td>8</td>\n",
              "      <td>675</td>\n",
              "      <td>Triumph</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TVS Apache RTR 180cc</td>\n",
              "      <td>65000</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>16329</td>\n",
              "      <td>First Owner</td>\n",
              "      <td>4</td>\n",
              "      <td>180</td>\n",
              "      <td>TVS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Yamaha FZ S V 2.0 150cc-Ltd. Edition</td>\n",
              "      <td>80000</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>10000</td>\n",
              "      <td>First Owner</td>\n",
              "      <td>3</td>\n",
              "      <td>150</td>\n",
              "      <td>Yamaha</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38da1531-72c4-424f-ace8-a9e26c5b060b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-38da1531-72c4-424f-ace8-a9e26c5b060b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-38da1531-72c4-424f-ace8-a9e26c5b060b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(x = 'brand' , y = 'price', data=bike , hue='owner')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        },
        "id": "9UXvtdoFr4Qb",
        "outputId": "3411c034-32b1-48c6-f363-e462c2305ffc"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f551fd9e460>"
            ]
          },
          "metadata": {},
          "execution_count": 99
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pairplot(bike)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 743
        },
        "id": "uxuln_i30JHR",
        "outputId": "e7e67872-21ca-4758-872f-f379049b15a3"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7f551fd925b0>"
            ]
          },
          "metadata": {},
          "execution_count": 107
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 20 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "d_f = pd.read_csv('sample_data/bike_dataset.csv', names = ['model_name' , 'price' , 'CC' , 'mileage', 'type_of_bike' ,  'weight_in_kg' , 'links' , 'acceleration_speed' , 'top_speed'])\n",
        "\n",
        "sns.FacetGrid(d_f, hue='acceleration_speed', height=5).map(plt.bar, 'acceleration_speed', 'weight_in_kg').add_legend()\n",
        "\n",
        "# sns.boxplot(x = 'weight_in_kg' ,  y = 'top_speed' , data=d_f)"
      ],
      "metadata": {
        "id": "HpPTDh3WeX1n",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1117
        },
        "outputId": "a977a01e-a7a1-4825-f69a-70cf5595d745"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f55410afe80>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 464.75x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}